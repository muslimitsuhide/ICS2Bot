import telebot
from telebot import types
import sqlite3

bot = telebot.TeleBot('token')

name = None
surname = None
group_user = None

new_event_name = None
new_event_date = None

# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
START_STATE =   1
HELP_STATE =    2
EVENTS_STATE =  3
SUPPORT_STATE = 4
DONATE_STATE =  5

@bot.message_handler(commands=['start'])
def main(message):
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), surname varchar(50), group_user varchar(20))')
    conn.commit()
    cur.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup()
    reg_btn = types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    markup.row(reg_btn)
    exit_btn = types.KeyboardButton('–í—ã—Ö–æ–¥')
    markup.row(exit_btn)
    bot.send_message(message.chat.id, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!', reply_markup=markup)

    bot.register_next_step_handler(message, handle_registration)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, 'ü§ñ ICS2 Bot –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—ã–µ —É—á–µ–±–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞—Ä–∞–Ω–µ–µ, –¥–∞–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ä–µ–¥–∫–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç.\n\n'
                    '‚≠êÔ∏è –£–¥–æ–±—Å—Ç–≤–∞:\n\n- –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å;\n- –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤;\n- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ø–∞–¥—É—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω–∞ –†–ö;\n'
                    '- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞–≤–∞—Ç—å –æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å.\n\n'
                    'üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ —Ç—É—Ç ‚Äî @muslimitsuhide ü¶Ñ.\n\n'
                    'üöÄ –Ø —Ç–∞–∫–∂–µ –±—É–¥—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–Ω–æ—Å–∏—Ç—å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ /faq.')
    

@bot.message_handler(commands=['faq'])
def faq(message):
    bot.send_message(message.chat.id, '<b>1. –£ –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n\n'
                    '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É /start. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å /start –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É. '
                    '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∞—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @muslimitsuhide.', parse_mode='HTML')


@bot.message_handler(commands=['add_event'])
def add_event(message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id == id:
        conn = sqlite3.connect('events.sql')
        cur = conn.cursor()

        cur.execute('CREATE TABLE IF NOT EXISTS events (event_id int auto_increment primary key, event_name varchar(50), event_date varchar(50))')
        conn.commit()
        cur.close()
        conn.close()

        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
        bot.register_next_step_handler(message, event_name_input)
    else:
        bot.send_message(message.chat.id, '‚ùå –í—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@bot.message_handler(commands=['send_message'])
def send_message(message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id == id:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(message, process_message)
    else:
        bot.reply_to(message, '‚ùå –í—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def process_message(message):
    message_text = message.text
    send_message_to_all_users(message_text)
    bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_message_to_all_users(message_text):
    conn = sqlite3.connect('tg_id.sql')
    cur = conn.cursor()

    cur.execute('SELECT DISTINCT user_id FROM tg_id')
    user_ids = cur.fetchall()

    for user_id in user_ids:
        user_id = user_id[0]
        bot.send_message(user_id, f'üì© –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n {message_text}')

    cur.close()
    conn.close()


def event_name_input(message):
    global new_event_name
    new_event_name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
    bot.register_next_step_handler(message, event_date_input)


def event_date_input(message):
    global new_event_date
    new_event_date = message.text.strip()
    
    conn = sqlite3.connect('events.sql')
    cur = conn.cursor()

    cur.execute(f"INSERT INTO events (event_name, event_date) VALUES ('%s', '%s')" % (new_event_name, new_event_date))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!') 


def handle_registration(message):
    if message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        user_id = message.chat.id
        conn = sqlite3.connect('tg_id.sql')
        cur = conn.cursor()

        cur.execute('CREATE TABLE IF NOT EXISTS tg_id (id INTEGER PRIMARY KEY, user_id INTEGER)')
        cur.execute('INSERT INTO tg_id (user_id) VALUES (?)', (user_id,))
        conn.commit()

        cur.close()
        conn.close()

        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:')
        bot.register_next_step_handler(message, user_name)
    elif message.text == '–í—ã—Ö–æ–¥':
        bot.send_message(message.chat.id, 'üîò –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.')


def user_name(message): 
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é:')
    bot.register_next_step_handler(message, user_surname)


def user_surname(message): 
    global surname
    surname = message.text.strip()
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:')
    bot.register_next_step_handler(message, user_group)


def user_group(message): 
    global group_user
    group_user = message.text.strip()

    bot.send_message(message.chat.id, f'–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {surname}\n–ì—Ä—É–ø–ø–∞: {group_user}')
    new_markup = types.ReplyKeyboardMarkup()
    true_btn = types.KeyboardButton('‚úÖ')
    new_markup.row(true_btn)
    false_btn = types.KeyboardButton('‚ùå')
    new_markup.row(false_btn)
    bot.register_next_step_handler(message, varif)
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?', reply_markup=new_markup)


def varif(message):
    if message.text == '‚úÖ':
        conn = sqlite3.connect('users.sql')
        cur = conn.cursor()

        cur.execute(f"INSERT INTO users (name, surname, group_user) VALUES ('%s', '%s', '%s')" % (name, surname, group_user))
        conn.commit()
        cur.close()
        conn.close()

        markup = types.ReplyKeyboardMarkup()
        help_btn = types.KeyboardButton('ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É')
        markup.row(help_btn)
        list_btn = types.KeyboardButton('üìÑ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
        markup.row(list_btn)
        sup_btn = types.KeyboardButton('ü´Ç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        markup.row(sup_btn)
        donate_btn = types.KeyboardButton('üí∏ –î–æ–Ω–∞—Ç—ã')
        markup.row(donate_btn)
        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ START_STATE
        bot.register_next_step_handler(message, on_click, state=START_STATE)
        bot.send_message(message.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id,'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        main(message)


def on_click(message, **kwargs):
    state = kwargs.get('state')
    if message.text == 'ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É':
        bot.send_message(message.chat.id, 'ü§ñ ICS2 Bot –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—ã–µ —É—á–µ–±–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞—Ä–∞–Ω–µ–µ, –¥–∞–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ä–µ–¥–∫–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç.\n\n'
                        '‚≠êÔ∏è –£–¥–æ–±—Å—Ç–≤–∞:\n\n- –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å;\n- –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤;\n- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ø–∞–¥—É—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω–∞ –†–ö;\n'
                        '- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞–≤–∞—Ç—å –æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å.\n\n'
                        'üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ —Ç—É—Ç ‚Äî @muslimitsuhide ü¶Ñ.\n\n'
                        'üöÄ –Ø —Ç–∞–∫–∂–µ –±—É–¥—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–Ω–æ—Å–∏—Ç—å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ /faq.')
        bot.register_next_step_handler(message, on_click, state=HELP_STATE)

    elif message.text == 'üìÑ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
        show_events(message.chat.id)
        bot.register_next_step_handler(message, on_click, state=EVENTS_STATE)

    elif message.text == 'ü´Ç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(message.chat.id, 'üí¨ –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @muslimitsuhide.')
        bot.register_next_step_handler(message, on_click, state=SUPPORT_STATE)

    elif message.text == 'üí∏ –î–æ–Ω–∞—Ç—ã':
        bot.send_message(message.chat.id, 'üí¨ –î–æ–Ω–∞—Ç–æ–≤ –Ω–µ –±—É–¥–µ—Ç, –º–Ω–µ —Å—Ç–∞–ª–æ –≤–ø–∞–¥–ª—É.')
        bot.register_next_step_handler(message, on_click, state=DONATE_STATE)

    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.')


def show_events(chat_id):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –±–¥
    events_data = get_events_data()

    if not events_data:
        bot.send_message(chat_id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.')
        return

    markup = types.InlineKeyboardMarkup()
    for event_name, event_date in events_data:
        callback_data = f'{event_name}|{event_date}'
        event_btn = types.InlineKeyboardButton(event_name, callback_data=callback_data)
        markup.add(event_btn)

    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', reply_markup=markup)


def get_events_data():
    conn = sqlite3.connect('events.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS events (event_id INTEGER PRIMARY KEY AUTOINCREMENT, event_name VARCHAR(50), event_date VARCHAR(20))')
    conn.commit()

    cur.execute('SELECT event_name, event_date FROM events')
    events_data = cur.fetchall()

    conn.close()

    conn = sqlite3.connect('user_events.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS user_events (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, event_id INTEGER, order_number INTEGER)')
    conn.commit()

    cur.close()
    conn.close()

    return events_data


def add_user_event(user_id, event_id):
    conn = sqlite3.connect('user_events.sql')
    cur = conn.cursor()

    cur.execute('SELECT COUNT(*) FROM user_events WHERE user_id = ? AND event_id = ?', (user_id, event_id))
    result = cur.fetchone()
    count = result[0] if result else 0

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    cur.execute('SELECT COUNT(*) FROM user_events WHERE event_id = ?', (event_id,))
    result = cur.fetchone()
    if result and count == 0:
        order_number = result[0] + 1
    else:
        order_number = 1

    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    cur.execute('INSERT INTO user_events (user_id, event_id, order_number) VALUES (?, ?, ?)', (user_id, event_id, order_number))
    conn.commit()

    cur.close()
    conn.close()

    return order_number, count


def get_numbers(num):
    if num < 1:
        raise ValueError("Number error, check DB")

    que_nums = []

    for _ in range(4):
        if num <= 100:
            que_nums.append(num)
        else:
            que_nums.append(num - 100)
        num += 25

    return ', '.join(map(str, que_nums))


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    order_number, count = add_user_event(call.from_user.id, call.data)
    event_name, event_date = call.data.split("|")
    true_num = get_numbers(order_number)
    
    if "|" in call.data and count == 0:
        bot.answer_callback_query(call.id, f'‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {event_name}\n–î–∞—Ç–∞: {event_date}', show_alert=True)
        # –ø–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = call.message.chat.id

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        bot.send_message(chat_id, f'üÜó –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {event_name}\n----------------------------\n–î–∞—Ç–∞: {event_date}\n–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {order_number}\n–ù–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∞—à–µ–º –±–∏–ª–µ—Ç–µ: {true_num}\n'
                         '----------------------------')

        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    else:
        chat_id = call.message.chat.id
        bot.send_message(chat_id, f'‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {event_name}!\n----------------------------\n–î–∞—Ç–∞: {event_date}\n–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {order_number}')

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)

bot.polling(none_stop=True)